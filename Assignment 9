// headers for stuff
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>

 int main()
 {
    // pointer for the file
    FILE *pic;

    // set up instream
    pic = fopen("darthvador.bmp", "r+");

    //get "size"
    fseek(pic, 0, SEEK_END);

    int size = ftell(pic); // 8316054

    printf("Size of the pic: %d", size);

    printf("\n");

    // set up variables for size
    unsigned int buff, width, height;

    // read stuff from pic, need to bypass header so start offset at 14
    fseek(pic, 14, SEEK_SET); // this moves the cursor

    fread(&buff, 4, 1, pic);
    fread(&width,4, 1, pic);
    fread(&height, 4, 1, pic);

    //output to console to see whats up
    printf("Size is %d\n",buff);
    printf("Width is %d\n",width);
    printf("Height is %d\n", height);

    //Now that we have what we need from the header, we can move to get the first pixel (3 bytes at a time?)
    fseek(pic, 54, SEEK_SET);

    // create output file stream now too
    FILE *newPic;

    newPic = fopen("mirrorVader.bmp", "w+");

    // So all this is to copy over the header because remember, this will not change if we just flip the pciture
    rewind(pic);  // need to move cursor back

    char * buff2;

    buff2 = malloc(54);    // need 54 for the size of the header

    fread(buff2, 54, 1, pic);

    fwrite(buff2, 54, 1, newPic);

    // free buff2 since we are going to just read rows and therefor need a new size
    free(buff2);


    // now that we are at the end of header, we will probably want to read pixels one line at a time and write to o stream reversed.
    buff2 = malloc(width * 3); // width will be pixels wide? ( x 3 because we need r g b values which is 3 characters per)

    for(int j = 0; j < height; j++){

    fread(buff2, 3, width, pic);

    for(int count = 0; count < width/2; count++)
    {
      // inner loop to track pixels
      for(int i = 0; i < 3; i++)
      {
         char temp = buff2[count * 3 + i];
         buff2[count * 3 + i] = buff2[(width - count - 1) * 3 + i];
         buff2[(width - count - 1) * 3 + i] = temp;
      }
    }
   
    // write out to new file
    fwrite(buff2, 3, width, newPic);
   }

    free(buff2);
    fclose(newPic);
    fclose(pic);

    return 0;
 }
